package com.rtmap.modules.app.service.impl;

import com.alibaba.fastjson.JSON;
import com.rtmap.modules.app.dao.MallDao;
import com.rtmap.modules.app.entity.*;
import com.rtmap.modules.app.entity.vo.MallVo;
import com.rtmap.modules.app.entity.vo.ParameterVo;
import com.rtmap.modules.app.service.MallFloorAnalysisService;
import com.rtmap.modules.app.utils.Constants;
import com.rtmap.modules.app.utils.HttpUtil;
import com.rtmap.modules.app.utils.OverviewRingSimilarUtils;
import com.rtmap.modules.app.utils.TimeUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

@Service
@Slf4j
public class MallFloorAnalysisServiceImpl implements MallFloorAnalysisService {


    @Resource
    MallDao mallDao;
    @Autowired
    TimeUtils timeUtils;
    @Autowired
    HttpUtil httpUtil;
    @Value("${common.request.url}")
    String urlHeader;
    @Autowired
    OverviewRingSimilarUtils overview;


    @Override
    public List<FloorRankEntity> sort(String dataType, ParameterVo parameterVo) {
        RequestEntity requestEntity = new RequestEntity();
        requestEntity.setGroupId(parameterVo.getGroupId());
        requestEntity.setMarketId(parameterVo.getMarketId());
        requestEntity.setMallId(parameterVo.getMallId());
        requestEntity.setDateType(parameterVo.getDateType());
        requestEntity.setStartTime(parameterVo.getStartTime());
        if (Constants.SALEAMOUNT.equals(dataType)){
            String URL = urlHeader + "85";
            return httpUtil.httpUtilPlus(URL,requestEntity);
        }
        if (Constants.SALEEFFECT.equals(dataType)){
            String URL = urlHeader + "86";
            return httpUtil.httpUtilPlus(URL,requestEntity);
        }
        if (Constants.PERCUSTOMERPRICE.equals(dataType)){
            String URL = urlHeader + "87";
            return httpUtil.httpUtilPlus(URL,requestEntity);
        }
        if (Constants.TRADEBILLS.equals(dataType)){
            String URL = urlHeader + "88";
            return httpUtil.httpUtilPlus(URL,requestEntity);
        }
        log.info("楼层排行榜-输入的dataType 不在预定范围内！");
        return null;
    }

    @Override
    public List<FloorListEntity> floorList(ParameterVo parameterVo) {
        RequestEntity requestEntity = new RequestEntity();
        requestEntity.setGroupId(parameterVo.getGroupId());
        requestEntity.setMarketId(parameterVo.getMarketId());
        requestEntity.setMallId(parameterVo.getMallId());

        String URL = urlHeader+"75";
        log.info("URL ==>> {}",URL);
        return httpUtil.httpUtilPlus(URL, requestEntity);
    }

    @Override
    public MallSaleEntity floorData(MallVo mallVo) {
        //计算的是时间段内数据和
        MallSaleEntity mallSaleEntity = mallDao.queryFloorUncompleteMonth(mallVo);
        if (mallSaleEntity == null){
            return null;
        }
        //日均销售坪效
//        long times = timeUtils.getdays(mallVo.getStartTime(), mallVo.getEndTime());
//        mallSaleEntity.setSaleEffect(mallSaleEntity.getSaleEffect() / times);
        //客单价
        mallSaleEntity.setPerCustomerPrice(mallSaleEntity.getSaleAmount() / mallSaleEntity.getTradeBills());
        return mallSaleEntity;
    }

    /**
     * 楼层分析-对比分析
     *     * 销售额  saleAmount
     *      * 日均销售坪效  saleEffect
     *      * 客单价  perCustomerPrice
     *      * 交易笔数 tradeBills
     */
    @Override
    public List<FloorMergeEntity> Contrast(String dataType, MallVo mallVo) {
        RequestEntity requestEntity = new RequestEntity();
        requestEntity.setMallId(mallVo.getMallId());
        requestEntity.setDateType(mallVo.getDateType());
        requestEntity.setStartTime(mallVo.getStartTime());
        requestEntity.setEndTime(mallVo.getEndTime());

        log.info("requestEntity ==>> {}", JSON.toJSONString(requestEntity));

        if (Constants.SALEAMOUNT.equals(dataType)){
            String URL = urlHeader+"67";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }
        if (Constants.SALEEFFECT.equals(dataType)){
            String URL = urlHeader+"68";
            log.info("URL ==>> {}",URL);
            List<FloorMergeEntity> list = httpUtil.httpUtilPlus(URL, requestEntity);
            long days = timeUtils.getdays(mallVo.getStartTime(),mallVo.getEndTime());
            if (list != null){
                for (int i = 0;i<list.size();i++){
                    list.get(i).setResultData(list.get(i).getResultData() / days);
                }
            }
            return list;
        }
        if (Constants.PERCUSTOMERPRICE.equals(dataType)){
            String URL = urlHeader+"69";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }
        if (Constants.TRADEBILLS.equals(dataType)){
            String URL = urlHeader+"70";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }

        return new ArrayList<>();
    }

    @Override
    public List<FloorMergeEntity> Proportion(MallVo mallVo) {
        RequestEntity requestEntity = new RequestEntity();
        requestEntity.setMallId(mallVo.getMallId());
        requestEntity.setDateType(mallVo.getDateType());
        requestEntity.setStartTime(mallVo.getStartTime());
        requestEntity.setEndTime(mallVo.getEndTime());

        String URL = urlHeader+"67";
        log.info("URL ==>> {}",URL);
        return httpUtil.httpUtilPlus(URL, requestEntity);
    }

    @Override
    public MallSaleCompareEntity floorCompare(MallVo mallVo) {

        MallSaleCompareEntity mallSaleCompareEntity = new MallSaleCompareEntity();

        if (Constants.D.equals(mallVo.getDateType())){
            //计算昨天
            String timeDate = timeUtils.getDay(mallVo.getStartTime(),-1);
            mallVo.setStartTime(timeDate);

            MallSaleEntity todayData = mallDao.queryFloorNatureData(mallVo) ;

            if (todayData == null){
                return mallSaleCompareEntity;
            }
            overview.saleSaveData(mallSaleCompareEntity,todayData);

            String yesterday = timeUtils.getDay(mallVo.getStartTime(), -1);
            mallVo.setStartTime(yesterday);
            MallSaleEntity yesterdayData = mallDao.queryFloorNatureData(mallVo) ;

            if (yesterdayData == null){
                return mallSaleCompareEntity;
            }

            overview.saleRing(mallSaleCompareEntity,todayData,yesterdayData);
            return mallSaleCompareEntity;
        }

        if (Constants.DM.equals(mallVo.getDateType())){
            if (timeUtils.isFistDay(mallVo.getStartTime())){
                //第一天
                //初始月应该重置为上月1号
                mallVo.setDateType(Constants.M);
                //接下来按自然月计算
            }else {
                //非第一天，按天统计
                String currentTime = mallVo.getStartTime();
                mallVo.setDateType(Constants.D);
                mallVo.setStartTime(timeUtils.getfirstDayOfMonth(currentTime));
                mallVo.setEndTime(currentTime); // 本月第一天 - 本月当天
                MallSaleEntity monthData = mallDao.queryFloorUncompleteMonth(mallVo);

                if (monthData == null){
                    return mallSaleCompareEntity;
                }
                overview.saleSaveData(mallSaleCompareEntity,monthData);


                String lastMonth = timeUtils.getLastMonth(currentTime, -1);
                mallVo.setStartTime(timeUtils.getfirstDayOfMonth(lastMonth));// 上月第一天  上月当天
                mallVo.setEndTime(lastMonth);
                MallSaleEntity lastMonthData = mallDao.queryFloorUncompleteMonth(mallVo);

                if (lastMonthData == null){
                    return mallSaleCompareEntity;
                }
                //环比
                overview.saleRing(mallSaleCompareEntity,monthData,lastMonthData);

                String monthOfLastYear = timeUtils.getLastYear(currentTime,-1);
                mallVo.setStartTime(timeUtils.getfirstDayOfMonth(monthOfLastYear));
                mallVo.setEndTime(monthOfLastYear);
                MallSaleEntity monthOfLastYearData = mallDao.queryFloorUncompleteMonth(mallVo);

                if (monthOfLastYearData == null){
                    return mallSaleCompareEntity;
                }
                // 同比
                overview.saleSimilar(mallSaleCompareEntity,monthData,monthOfLastYearData);
                return mallSaleCompareEntity;
            }
        }

        //自然月 M  环比同比
        if (Constants.M.equals(mallVo.getDateType())){
            //前端给当前时间，计算上月一号
            mallVo.setStartTime(timeUtils.getLastMonth(mallVo.getStartTime(),-1));
            MallSaleEntity monthData = mallDao.queryFloorNatureData(mallVo);

            if (monthData == null){
                return mallSaleCompareEntity;
            }
            overview.saleSaveData(mallSaleCompareEntity,monthData);

            String lastMonth = timeUtils.getLastMonth(mallVo.getStartTime(), -1);
            mallVo.setStartTime(lastMonth);
            MallSaleEntity lastMonthData = mallDao.queryFloorNatureData(mallVo);

            if (lastMonthData == null){
                return mallSaleCompareEntity;
            }
            //环比
            overview.saleRing(mallSaleCompareEntity,monthData,lastMonthData);

            String monthOfLastYear = timeUtils.getMonthOfLastYear(mallVo.getStartTime());
            mallVo.setStartTime(monthOfLastYear);
            MallSaleEntity monthOfLastYearData = mallDao.queryFloorNatureData(mallVo);

            if (monthOfLastYearData == null){
                return mallSaleCompareEntity;
            }
            // 同比
            overview.saleSimilar(mallSaleCompareEntity,monthData,monthOfLastYearData);
            return mallSaleCompareEntity;
        }

        //年 计算同比
        if (Constants.Y.equals(mallVo.getDateType())){
            MallSaleEntity yearData = mallDao.queryFloorNatureData(mallVo);

            if (yearData == null){
                return mallSaleCompareEntity;
            }
           overview.saleSaveData(mallSaleCompareEntity,yearData);

            String lastYear = timeUtils.getLastYear(mallVo.getStartTime(),-1);
            mallVo.setStartTime(lastYear);
            MallSaleEntity lastYearData = mallDao.queryFloorNatureData(mallVo);

            if (lastYearData == null){
                return mallSaleCompareEntity;
            }
            // 同比
            overview.saleSimilar(mallSaleCompareEntity,yearData,lastYearData);
            return mallSaleCompareEntity;
        }
        return mallSaleCompareEntity;
    }

    /**
     * 楼层分析-单楼层-时间段内每天数据
     *     * 销售额  saleAmount
     *      * 日均销售坪效  saleEffect
     *      * 客单价  perCustomerPrice
     *      * 交易笔数 tradeBills
     */
    @Override
    public List<TrendEntity> trend(String dataType, MallVo mallVo) {
        RequestEntity requestEntity = new RequestEntity();
        requestEntity.setGroupId(mallVo.getGroupId());
        requestEntity.setMarketId(mallVo.getMarketId());
        requestEntity.setFloorId(mallVo.getFloorId());
        requestEntity.setMallId(mallVo.getMallId());
        requestEntity.setDateType(mallVo.getDateType());
        requestEntity.setStartTime(mallVo.getStartTime());
        requestEntity.setEndTime(mallVo.getEndTime());

        log.info("requestEntity ==>> {}", JSON.toJSONString(requestEntity));

        if (Constants.SALEAMOUNT.equals(dataType)){
            String URL = urlHeader+"71";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }
        if (Constants.SALEEFFECT.equals(dataType)){
            String URL = urlHeader+"72";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }
        if (Constants.PERCUSTOMERPRICE.equals(dataType)){
            String URL = urlHeader+"73";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }
        if (Constants.TRADEBILLS.equals(dataType)){
            String URL = urlHeader+"74";
            log.info("URL ==>> {}",URL);
            return httpUtil.httpUtilPlus(URL, requestEntity);
        }

        return new ArrayList<>();
    }


}
