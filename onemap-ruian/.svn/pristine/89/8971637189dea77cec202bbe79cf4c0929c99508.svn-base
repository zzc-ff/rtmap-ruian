package com.rtmap.modules.app.controller;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.date.DateField;
import cn.hutool.core.date.DateUtil;
import cn.hutool.http.Header;
import cn.hutool.http.HttpRequest;
import com.alibaba.fastjson.JSON;
import com.rtmap.common.utils.MiddlgrouResult;
import com.rtmap.common.utils.R;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.*;

/**
 * @author CuiZheng
 * @title: CustomerController
 * @description: 客流说
 * @date 2019/5/23 18:10
 */
@RestController
@RequestMapping("/customer")
public class CustomerController {


    @Value("${common.request.url}")
    private String middlegrouUrl;

    @RequestMapping("/customerOverView")
    public R customerOverView(@RequestParam String mallId, @RequestParam  String dateType){
        Map<String,Object> paramMap=new HashMap<>();
        Map<String,Object> resultMap=new HashMap<>();
        paramMap.put("mall_id",mallId);
        int sqlId=0;

        if(dateType.equals("D")){
            sqlId=103;
            Date yesterday=DateUtil.yesterday();
            paramMap.put("yesterday",DateUtil.format(yesterday,"yyyyMMdd"));
            paramMap.put("nearday",DateUtil.format(DateUtil.offsetDay(yesterday,-1),"yyyyMMdd"));
            paramMap.put("theDayOfLastYear",DateUtil.format(DateUtil.offset(yesterday,DateField.YEAR,-1),"yyyyMMdd"));
            paramMap.put("dateType","D");
        }else if(dateType.equals("M")){
            if(DateUtil.today().equals(DateUtil.beginOfMonth(new Date()))){
                sqlId=103;
                //如果是当月第一天，则拿上月整月去对比
                paramMap.put("dateType","M");
                //上月第一天
                Date beaginOfLastMonth=DateUtil.beginOfMonth(DateUtil.yesterday());
                //上上月第一天
                Date nearMonth=DateUtil.offset(beaginOfLastMonth,DateField.MONTH,-1);
                //去年同月第一天
                String beaginOfMonthLastYear=DateUtil.format(DateUtil.offset(beaginOfLastMonth,DateField.YEAR,-1),"yyyyMMdd");

                paramMap.put("yesterday",DateUtil.format(beaginOfLastMonth,"yyyyMMdd"));
                paramMap.put("nearday",DateUtil.format(nearMonth,"yyyyMMdd"));
                paramMap.put("theDayOfLastYear",beaginOfMonthLastYear);

            }else{
                paramMap.put("dateType","D");
                sqlId=104;
                //如果不是第一天，则按当月累加值对比
                //当月起始和结束时间
                Date startTime1=DateUtil.beginOfMonth(new Date());
                Date endTime1=DateUtil.yesterday();
                //上月起始和结束时间
                Date startTime2=DateUtil.offset(startTime1,DateField.MONTH,-1);
                Date endTime2=DateUtil.offset(endTime1,DateField.MONTH,-1);
                //去年同月起始和结束时间
                Date startTime3=DateUtil.offset(startTime1,DateField.YEAR,-1);
                Date endTime3=DateUtil.offset(endTime1,DateField.YEAR,-1);

                paramMap.put("startTime1",DateUtil.format(startTime1,"yyyyMMdd"));
                paramMap.put("endTime1",DateUtil.format(endTime1,"yyyyMMdd"));

                paramMap.put("startTime2",DateUtil.format(startTime2,"yyyyMMdd"));
                paramMap.put("endTime2",DateUtil.format(endTime2,"yyyyMMdd"));

                paramMap.put("startTime3",DateUtil.format(startTime3,"yyyyMMdd"));
                paramMap.put("endTime3",DateUtil.format(endTime3,"yyyyMMdd"));
            }
        }else if(dateType.equals("Y")){
            if(DateUtil.today().equals(DateUtil.beginOfYear(new Date()))){
                //如果今天是1月1日，则整年数据进行对比
                sqlId=105;
                paramMap.put("dateType","Y");

                Date beginOfLastYear=DateUtil.offset(DateUtil.date(),DateField.YEAR,-1);
                Date beginOfLastTwoYear=DateUtil.offset(DateUtil.date(),DateField.YEAR,-2);

                paramMap.put("yesterday",DateUtil.format(beginOfLastYear,"yyyyMMdd"));
                paramMap.put("nearday",DateUtil.format(beginOfLastTwoYear,"yyyyMMdd"));
            }else{
                paramMap.put("dateType","D");
                sqlId=106;

                Date startTime1=DateUtil.beginOfYear(DateUtil.date());
                Date endTime1=DateUtil.date();
                Date startTime2=DateUtil.offset(startTime1,DateField.YEAR,-1);
                Date endTime2=DateUtil.offset(endTime1,DateField.YEAR,-1);

                paramMap.put("startTime1",DateUtil.format(startTime1,"yyyyMMdd"));
                paramMap.put("endTime1",DateUtil.format(endTime1,"yyyyMMdd"));

                paramMap.put("startTime2",DateUtil.format(startTime2,"yyyyMMdd"));
                paramMap.put("endTime2",DateUtil.format(endTime2,"yyyyMMdd"));
            }
        }

        String responseStr=HttpRequest.post(middlegrouUrl+sqlId).body(JSON.toJSONString(paramMap))
                .header(Header.ACCEPT_CHARSET,"UTF-8")
                .header(Header.CONTENT_TYPE,"application/json").execute().body();
        if(StringUtils.isNotBlank(responseStr)){
            MiddlgrouResult result=JSON.parseObject(responseStr,MiddlgrouResult.class);
            if(result!=null&&result.getExtend()!=null){
                int curVal=0;
                int nearVal=0;
                int lastVal=0;
                int mem_num=0;
                List<Map<String,Object>> list= (List<Map<String, Object>>) result.getExtend().get("data");
                if(list!=null&&list.size()>0){
                    for(Map<String,Object> memberInfo:list){
                        curVal+=(int)memberInfo.get("curVal");
                        nearVal+=(int)memberInfo.get("nearVal");
                        lastVal+=memberInfo.get("lastVal")!=null?(int)memberInfo.get("lastVal"):0;
                    }
                }
                double curVal_d=curVal;
                double nearVal_d=nearVal;
                double lastVal_d=lastVal;
                resultMap.put("curVal",curVal);
                if(!dateType.equals("Y")){
                    resultMap.put("tongbi",(curVal_d-lastVal_d)/lastVal_d);
                }
                resultMap.put("huanbi",(curVal_d-nearVal_d)/nearVal_d);
            }
        }
        return R.ok(resultMap);
    }

    /**
    　* @Description: 客流趋势
    　* @param
    　* @return
    　* @throws
    　* @author CuiZheng
    　* @date 2019/5/23 19:09
    **/
    @RequestMapping("/customerTrend")
    public R customerTrend(@RequestParam String dateType,@RequestParam  String startTime,@RequestParam String endTime,@RequestParam String mallId,@RequestParam(defaultValue = "1") int queryType){
        Map<String,Object> paramMap=new HashMap<>();
        Map<String,Object> resultMap=new HashMap<>();
        int sqlId=107;
        if(queryType==2){
            sqlId=108;
        }
        paramMap.put("dateType",dateType);
        paramMap.put("startTime",startTime);
        paramMap.put("endTime",endTime);
        paramMap.put("mallId",mallId);
        String responseStr=HttpRequest.post(middlegrouUrl+sqlId).body(JSON.toJSONString(paramMap))
                .header(Header.ACCEPT_CHARSET,"UTF-8")
                .header(Header.CONTENT_TYPE,"application/json").execute().body();
        if(StringUtils.isNotBlank(responseStr)){
            MiddlgrouResult result=JSON.parseObject(responseStr,MiddlgrouResult.class);
            if(result!=null&&result.getExtend()!=null){
                resultMap.put("customerTrend",result.getExtend().get("data"));
            }
        }
        return R.ok(resultMap);
    }

    /**
    　* @Description: 楼层客流分析-楼层排名
    　* @param
    　* @return
    　* @throws
    　* @author CuiZheng
    　* @date 2019/5/23 19:30
    **/
    @RequestMapping("/customerFloorOrder")
    public R customerFloorOrder(@RequestParam String mallId,@RequestParam String dateType,@RequestParam  String startTime,@RequestParam String endTime){
        Map<String,Object> paramMap=new HashMap<>();
        Map<String,Object> resultMap=new HashMap<>();

        paramMap.put("dateType",dateType);
        paramMap.put("startTime",startTime);
        paramMap.put("endTime",endTime);
        paramMap.put("mall_id",mallId);
        String responseStr=HttpRequest.post(middlegrouUrl+109).body(JSON.toJSONString(paramMap))
                .header(Header.ACCEPT_CHARSET,"UTF-8")
                .header(Header.CONTENT_TYPE,"application/json").execute().body();
        if(StringUtils.isNotBlank(responseStr)){
            MiddlgrouResult result=JSON.parseObject(responseStr,MiddlgrouResult.class);
            if(result!=null&&result.getExtend()!=null){
                List<Map<String,Object>> list= (List<Map<String, Object>>) result.getExtend().get("data");
                if(list!=null&&list.size()>0){
                    for(int i=0;i<list.size();i++){
                        Map<String,Object> customerInfo=list.get(i);
                        customerInfo.put("order",i+1+"/"+list.size());
                    }
                    Comparator<Map<String,Object>> comparator = Comparator.comparing(o -> String.valueOf(o.get("floor_name")));
                    // CollUtil.sort(list,comparator);
                    resultMap.put("customerTrend",CollUtil.sort(list,comparator));
                }
            }
        }
        return R.ok(resultMap);
    }

    @RequestMapping("/customerFloorTrend")
    public R customerFloorTrend(@RequestParam String dateType,@RequestParam String mallId,@RequestParam  String startTime,@RequestParam String endTime){
        Map<String,Object> paramMap=new HashMap<>();
        Map<String,Object> resultMap=new HashMap<>();

        paramMap.put("dateType",dateType);
        paramMap.put("startTime",startTime);
        paramMap.put("endTime",endTime);
        paramMap.put("mall_id",mallId);
        String responseStr=HttpRequest.post(middlegrouUrl+110).body(JSON.toJSONString(paramMap))
                .header(Header.ACCEPT_CHARSET,"UTF-8")
                .header(Header.CONTENT_TYPE,"application/json").execute().body();
        if(StringUtils.isNotBlank(responseStr)){
            MiddlgrouResult result=JSON.parseObject(responseStr,MiddlgrouResult.class);
            if(result!=null&&result.getExtend()!=null){
                Map<String,Map<String,Object>> dataMap=new TreeMap<>();
                List<Map<String,Object>> list= (List<Map<String, Object>>) result.getExtend().get("data");
                if(list!=null&&list.size()>0){
                    for(int i=0;i<list.size();i++){
                        Map<String,Object> tmpMap=list.get(i);
                        String curStatDate=String.valueOf(tmpMap.get("stat_date"));
                        String floorName=String.valueOf(tmpMap.get("floor_name"));
                        String customerNum=String.valueOf(tmpMap.get("customer_num"));
                       if(dataMap.get(curStatDate)==null){
                           Map<String,Object> subMap=new HashMap<>();
                           subMap.put("stat_date",curStatDate);
                           subMap.put(floorName,customerNum);
                           dataMap.put(curStatDate,subMap);
                       }else{
                           Map<String,Object> subMap=dataMap.get(curStatDate);
                           subMap.put(floorName,customerNum);
                           dataMap.put(curStatDate,subMap);
                       }
                    }
                }
                List resultList=new ArrayList<>();
                Iterator titer=dataMap.entrySet().iterator();
                while(titer.hasNext()){
                    Map.Entry ent=(Map.Entry )titer.next();
                    resultList.add(ent.getValue());
                }
                resultMap.put("customerTrend",resultList);
            }
        }
        return R.ok(resultMap);
    }


}
